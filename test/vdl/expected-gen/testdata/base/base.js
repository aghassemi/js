// This file was auto-generated by the veyron vdl tool.
var vom = require('vom');
// TODO(bjornick): Remove unused imports.
var Types = vom.Types;
var Type = vom.Type;
var Kind = vom.Kind;
var BigInt = vom.BigInt;
var Complex = vom.Complex;
var Builtins = vom.Builtins;
var Registry = vom.Registry;





module.exports = {};



// Types:
var _type1 = new Type();
var _type10 = new Type();
var _type11 = new Type();
var _type12 = new Type();
var _type13 = new Type();
var _type14 = new Type();
var _type15 = new Type();
var _type2 = new Type();
var _type3 = new Type();
var _type4 = new Type();
var _type5 = new Type();
var _type6 = new Type();
var _type7 = new Type();
var _type8 = new Type();
var _type9 = new Type();
var _typeArgs = new Type();
var _typeCompComp = new Type();
var _typeComposites = new Type();
var _typeKeyScalars = new Type();
var _typeNamedArray = new Type();
var _typeNamedBool = new Type();
var _typeNamedByte = new Type();
var _typeNamedComplex128 = new Type();
var _typeNamedComplex64 = new Type();
var _typeNamedFloat32 = new Type();
var _typeNamedFloat64 = new Type();
var _typeNamedInt16 = new Type();
var _typeNamedInt32 = new Type();
var _typeNamedInt64 = new Type();
var _typeNamedList = new Type();
var _typeNamedMap = new Type();
var _typeNamedSet = new Type();
var _typeNamedString = new Type();
var _typeNamedStruct = new Type();
var _typeNamedUint16 = new Type();
var _typeNamedUint32 = new Type();
var _typeNamedUint64 = new Type();
var _typeNestedArgs = new Type();
var _typeScalars = new Type();
var _typeerror = new Type();
_type1.kind = Kind.NILABLE;
_type1.name = "";
_type1.elem = _typeerror;
_type10.kind = Kind.MAP;
_type10.name = "";
_type10.elem = Types.COMPLEX128;
_type10.key = Types.STRING;
_type11.kind = Kind.ARRAY;
_type11.name = "";
_type11.len = 2;
_type11.elem = _typeComposites;
_type12.kind = Kind.LIST;
_type12.name = "";
_type12.elem = _typeComposites;
_type13.kind = Kind.MAP;
_type13.name = "";
_type13.elem = _typeComposites;
_type13.key = Types.STRING;
_type14.kind = Kind.MAP;
_type14.name = "";
_type14.elem = _type15;
_type14.key = _typeKeyScalars;
_type15.kind = Kind.LIST;
_type15.name = "";
_type15.elem = _type13;
_type2.kind = Kind.STRUCT;
_type2.name = "";
_type2.fields = [{name: "ID", type: Types.STRING}, {name: "Action", type: Types.UINT32}];
_type3.kind = Kind.LIST;
_type3.name = "";
_type3.elem = Types.ANY;
_type4.kind = Kind.ARRAY;
_type4.name = "";
_type4.len = 2;
_type4.elem = _typeScalars;
_type5.kind = Kind.LIST;
_type5.name = "";
_type5.elem = _typeScalars;
_type6.kind = Kind.SET;
_type6.name = "";
_type6.key = _typeKeyScalars;
_type7.kind = Kind.MAP;
_type7.name = "";
_type7.elem = _typeScalars;
_type7.key = Types.STRING;
_type8.kind = Kind.MAP;
_type8.name = "";
_type8.elem = _type9;
_type8.key = _typeKeyScalars;
_type9.kind = Kind.LIST;
_type9.name = "";
_type9.elem = _type10;
_typeArgs.kind = Kind.STRUCT;
_typeArgs.name = "v.io/core/veyron2/vdl/testdata/base.Args";
_typeArgs.fields = [{name: "A", type: Types.INT32}, {name: "B", type: Types.INT32}];
_typeCompComp.kind = Kind.STRUCT;
_typeCompComp.name = "v.io/core/veyron2/vdl/testdata/base.CompComp";
_typeCompComp.fields = [{name: "A0", type: _typeComposites}, {name: "A1", type: _type11}, {name: "A2", type: _type12}, {name: "A3", type: _type13}, {name: "A4", type: _type14}];
_typeComposites.kind = Kind.STRUCT;
_typeComposites.name = "v.io/core/veyron2/vdl/testdata/base.Composites";
_typeComposites.fields = [{name: "A0", type: _typeScalars}, {name: "A1", type: _type4}, {name: "A2", type: _type5}, {name: "A3", type: _type6}, {name: "A4", type: _type7}, {name: "A5", type: _type8}];
_typeKeyScalars.kind = Kind.STRUCT;
_typeKeyScalars.name = "v.io/core/veyron2/vdl/testdata/base.KeyScalars";
_typeKeyScalars.fields = [{name: "A0", type: Types.BOOL}, {name: "A1", type: Types.BYTE}, {name: "A2", type: Types.UINT16}, {name: "A3", type: Types.UINT32}, {name: "A4", type: Types.UINT64}, {name: "A5", type: Types.INT16}, {name: "A6", type: Types.INT32}, {name: "A7", type: Types.INT64}, {name: "A8", type: Types.FLOAT32}, {name: "A9", type: Types.FLOAT64}, {name: "A10", type: Types.COMPLEX64}, {name: "A11", type: Types.COMPLEX128}, {name: "A12", type: Types.STRING}, {name: "B0", type: _typeNamedBool}, {name: "B1", type: _typeNamedByte}, {name: "B2", type: _typeNamedUint16}, {name: "B3", type: _typeNamedUint32}, {name: "B4", type: _typeNamedUint64}, {name: "B5", type: _typeNamedInt16}, {name: "B6", type: _typeNamedInt32}, {name: "B7", type: _typeNamedInt64}, {name: "B8", type: _typeNamedFloat32}, {name: "B9", type: _typeNamedFloat64}, {name: "B10", type: _typeNamedComplex64}, {name: "B11", type: _typeNamedComplex128}, {name: "B12", type: _typeNamedString}];
_typeNamedArray.kind = Kind.ARRAY;
_typeNamedArray.name = "v.io/core/veyron2/vdl/testdata/base.NamedArray";
_typeNamedArray.len = 2;
_typeNamedArray.elem = Types.BOOL;
_typeNamedBool.kind = Kind.BOOL;
_typeNamedBool.name = "v.io/core/veyron2/vdl/testdata/base.NamedBool";
_typeNamedByte.kind = Kind.BYTE;
_typeNamedByte.name = "v.io/core/veyron2/vdl/testdata/base.NamedByte";
_typeNamedComplex128.kind = Kind.COMPLEX128;
_typeNamedComplex128.name = "v.io/core/veyron2/vdl/testdata/base.NamedComplex128";
_typeNamedComplex64.kind = Kind.COMPLEX64;
_typeNamedComplex64.name = "v.io/core/veyron2/vdl/testdata/base.NamedComplex64";
_typeNamedFloat32.kind = Kind.FLOAT32;
_typeNamedFloat32.name = "v.io/core/veyron2/vdl/testdata/base.NamedFloat32";
_typeNamedFloat64.kind = Kind.FLOAT64;
_typeNamedFloat64.name = "v.io/core/veyron2/vdl/testdata/base.NamedFloat64";
_typeNamedInt16.kind = Kind.INT16;
_typeNamedInt16.name = "v.io/core/veyron2/vdl/testdata/base.NamedInt16";
_typeNamedInt32.kind = Kind.INT32;
_typeNamedInt32.name = "v.io/core/veyron2/vdl/testdata/base.NamedInt32";
_typeNamedInt64.kind = Kind.INT64;
_typeNamedInt64.name = "v.io/core/veyron2/vdl/testdata/base.NamedInt64";
_typeNamedList.kind = Kind.LIST;
_typeNamedList.name = "v.io/core/veyron2/vdl/testdata/base.NamedList";
_typeNamedList.elem = Types.UINT32;
_typeNamedMap.kind = Kind.MAP;
_typeNamedMap.name = "v.io/core/veyron2/vdl/testdata/base.NamedMap";
_typeNamedMap.elem = Types.FLOAT32;
_typeNamedMap.key = Types.STRING;
_typeNamedSet.kind = Kind.SET;
_typeNamedSet.name = "v.io/core/veyron2/vdl/testdata/base.NamedSet";
_typeNamedSet.key = Types.STRING;
_typeNamedString.kind = Kind.STRING;
_typeNamedString.name = "v.io/core/veyron2/vdl/testdata/base.NamedString";
_typeNamedStruct.kind = Kind.STRUCT;
_typeNamedStruct.name = "v.io/core/veyron2/vdl/testdata/base.NamedStruct";
_typeNamedStruct.fields = [{name: "A", type: Types.BOOL}, {name: "B", type: Types.STRING}, {name: "C", type: Types.INT32}];
_typeNamedUint16.kind = Kind.UINT16;
_typeNamedUint16.name = "v.io/core/veyron2/vdl/testdata/base.NamedUint16";
_typeNamedUint32.kind = Kind.UINT32;
_typeNamedUint32.name = "v.io/core/veyron2/vdl/testdata/base.NamedUint32";
_typeNamedUint64.kind = Kind.UINT64;
_typeNamedUint64.name = "v.io/core/veyron2/vdl/testdata/base.NamedUint64";
_typeNestedArgs.kind = Kind.STRUCT;
_typeNestedArgs.name = "v.io/core/veyron2/vdl/testdata/base.NestedArgs";
_typeNestedArgs.fields = [{name: "Args", type: _typeArgs}];
_typeScalars.kind = Kind.STRUCT;
_typeScalars.name = "v.io/core/veyron2/vdl/testdata/base.Scalars";
_typeScalars.fields = [{name: "A0", type: Types.BOOL}, {name: "A1", type: Types.BYTE}, {name: "A2", type: Types.UINT16}, {name: "A3", type: Types.UINT32}, {name: "A4", type: Types.UINT64}, {name: "A5", type: Types.INT16}, {name: "A6", type: Types.INT32}, {name: "A7", type: Types.INT64}, {name: "A8", type: Types.FLOAT32}, {name: "A9", type: Types.FLOAT64}, {name: "A10", type: Types.COMPLEX64}, {name: "A11", type: Types.COMPLEX128}, {name: "A12", type: Types.STRING}, {name: "A13", type: _type1}, {name: "A14", type: Types.ANY}, {name: "A15", type: Types.TYPEOBJECT}, {name: "B0", type: _typeNamedBool}, {name: "B1", type: _typeNamedByte}, {name: "B2", type: _typeNamedUint16}, {name: "B3", type: _typeNamedUint32}, {name: "B4", type: _typeNamedUint64}, {name: "B5", type: _typeNamedInt16}, {name: "B6", type: _typeNamedInt32}, {name: "B7", type: _typeNamedInt64}, {name: "B8", type: _typeNamedFloat32}, {name: "B9", type: _typeNamedFloat64}, {name: "B10", type: _typeNamedComplex64}, {name: "B11", type: _typeNamedComplex128}, {name: "B12", type: _typeNamedString}];
_typeerror.kind = Kind.STRUCT;
_typeerror.name = "error";
_typeerror.fields = [{name: "IDAction", type: _type2}, {name: "Msg", type: Types.STRING}, {name: "ParamList", type: _type3}];
module.exports.Args = Registry.lookupOrCreateConstructor(_typeArgs, "Args");
module.exports.CompComp = Registry.lookupOrCreateConstructor(_typeCompComp, "CompComp");
module.exports.Composites = Registry.lookupOrCreateConstructor(_typeComposites, "Composites");
module.exports.KeyScalars = Registry.lookupOrCreateConstructor(_typeKeyScalars, "KeyScalars");
module.exports.NamedArray = Registry.lookupOrCreateConstructor(_typeNamedArray, "NamedArray");
module.exports.NamedBool = Registry.lookupOrCreateConstructor(_typeNamedBool, "NamedBool");
module.exports.NamedByte = Registry.lookupOrCreateConstructor(_typeNamedByte, "NamedByte");
module.exports.NamedComplex128 = Registry.lookupOrCreateConstructor(_typeNamedComplex128, "NamedComplex128");
module.exports.NamedComplex64 = Registry.lookupOrCreateConstructor(_typeNamedComplex64, "NamedComplex64");
module.exports.NamedFloat32 = Registry.lookupOrCreateConstructor(_typeNamedFloat32, "NamedFloat32");
module.exports.NamedFloat64 = Registry.lookupOrCreateConstructor(_typeNamedFloat64, "NamedFloat64");
module.exports.NamedInt16 = Registry.lookupOrCreateConstructor(_typeNamedInt16, "NamedInt16");
module.exports.NamedInt32 = Registry.lookupOrCreateConstructor(_typeNamedInt32, "NamedInt32");
module.exports.NamedInt64 = Registry.lookupOrCreateConstructor(_typeNamedInt64, "NamedInt64");
module.exports.NamedList = Registry.lookupOrCreateConstructor(_typeNamedList, "NamedList");
module.exports.NamedMap = Registry.lookupOrCreateConstructor(_typeNamedMap, "NamedMap");
module.exports.NamedSet = Registry.lookupOrCreateConstructor(_typeNamedSet, "NamedSet");
module.exports.NamedString = Registry.lookupOrCreateConstructor(_typeNamedString, "NamedString");
module.exports.NamedStruct = Registry.lookupOrCreateConstructor(_typeNamedStruct, "NamedStruct");
module.exports.NamedUint16 = Registry.lookupOrCreateConstructor(_typeNamedUint16, "NamedUint16");
module.exports.NamedUint32 = Registry.lookupOrCreateConstructor(_typeNamedUint32, "NamedUint32");
module.exports.NamedUint64 = Registry.lookupOrCreateConstructor(_typeNamedUint64, "NamedUint64");
module.exports.NestedArgs = Registry.lookupOrCreateConstructor(_typeNestedArgs, "NestedArgs");
module.exports.Scalars = Registry.lookupOrCreateConstructor(_typeScalars, "Scalars");
module.exports.error = Registry.lookupOrCreateConstructor(_typeerror, "error");




// Consts:

  module.exports.Cbool = new (Registry.lookupOrCreateConstructor(Types.BOOL))(true);

  module.exports.Cbyte = new (Registry.lookupOrCreateConstructor(Types.BYTE))(1);

  module.exports.Cint32 = new (Registry.lookupOrCreateConstructor(Types.INT32))(2);

  module.exports.Cint64 = new (Registry.lookupOrCreateConstructor(Types.INT64))(new BigInt(1, new Uint8Array([0x3])));

  module.exports.Cuint32 = new (Registry.lookupOrCreateConstructor(Types.UINT32))(4);

  module.exports.Cuint64 = new (Registry.lookupOrCreateConstructor(Types.UINT64))(new BigInt(1, new Uint8Array([0x5])));

  module.exports.Cfloat32 = new (Registry.lookupOrCreateConstructor(Types.FLOAT32))(6);

  module.exports.Cfloat64 = new (Registry.lookupOrCreateConstructor(Types.FLOAT64))(7);

  module.exports.CNamedBool = new (Registry.lookupOrCreateConstructor(_typeNamedBool))(true);

  module.exports.CNamedStruct = new (Registry.lookupOrCreateConstructor(_typeNamedStruct))({
  'a': true,
  'b': "test",
  'c': 0,
});

  module.exports.Ccomplex64 = new (Registry.lookupOrCreateConstructor(Types.COMPLEX64))(new Complex(8.000000, 9.000000));

  module.exports.Ccomplex128 = new (Registry.lookupOrCreateConstructor(Types.COMPLEX128))(new Complex(10.000000, 11.000000));

  module.exports.Cstring = new (Registry.lookupOrCreateConstructor(Types.STRING))("foo");

  module.exports.True = new (Registry.lookupOrCreateConstructor(Types.BOOL))(true);

  module.exports.Foo = new (Registry.lookupOrCreateConstructor(Types.STRING))("foo");

  module.exports.Five = new (Registry.lookupOrCreateConstructor(Types.INT32))(5);

  module.exports.Six = new (Registry.lookupOrCreateConstructor(Types.UINT64))(new BigInt(1, new Uint8Array([0x6])));

  module.exports.SixSquared = new (Registry.lookupOrCreateConstructor(Types.UINT64))(new BigInt(1, new Uint8Array([0x24])));

  module.exports.FiveSquared = new (Registry.lookupOrCreateConstructor(Types.INT32))(25);




function NotImplementedMethod(name) {
  throw new Error('Method ' + name + ' not implemented');
}


// Services:

  
    
function ServiceA(){}
module.exports.ServiceA = ServiceA

    
      
ServiceA.prototype.MethodA1 = NotImplementedMethod;
    
      
ServiceA.prototype.MethodA2 = NotImplementedMethod;
    
      
ServiceA.prototype.MethodA3 = NotImplementedMethod;
    
      
ServiceA.prototype.MethodA4 = NotImplementedMethod;
     

    
ServiceA.prototype._serviceDescription = {
  name: 'ServiceA',
  pkgPath: 'v.io/core/veyron2/vdl/testdata/base',
  doc: "",
  embeds: [],
  methods: [
    
      
    {
    name: 'MethodA1',
    doc: "",
    inArgs: [],
    outArgs: [],
    inStream: null,
    outStream: null,
    tags: []
  },
    
      
    {
    name: 'MethodA2',
    doc: "",
    inArgs: [{
      name: 'a',
      doc: "",
      type: Types.INT32
    },
    {
      name: 'b',
      doc: "",
      type: Types.STRING
    },
    ],
    outArgs: [{
      name: 's',
      doc: "",
      type: Types.STRING
    },
    ],
    inStream: null,
    outStream: null,
    tags: []
  },
    
      
    {
    name: 'MethodA3',
    doc: "",
    inArgs: [{
      name: 'a',
      doc: "",
      type: Types.INT32
    },
    ],
    outArgs: [{
      name: 's',
      doc: "",
      type: Types.STRING
    },
    ],
    inStream: null,
    outStream: {
      name: '',
      doc: '',
      type: _typeScalars
    },
    tags: [new (Registry.lookupOrCreateConstructor(Types.STRING))("tag"), new (Registry.lookupOrCreateConstructor(Types.UINT64))(new BigInt(1, new Uint8Array([0x6]))), ]
  },
    
      
    {
    name: 'MethodA4',
    doc: "",
    inArgs: [{
      name: 'a',
      doc: "",
      type: Types.INT32
    },
    ],
    outArgs: [],
    inStream: {
      name: '',
      doc: '',
      type: Types.INT32
    },
    outStream: {
      name: '',
      doc: '',
      type: Types.STRING
    },
    tags: []
  },
     
  ]
};

  
    
function ServiceB(){}
module.exports.ServiceB = ServiceB

    
      
ServiceB.prototype.MethodB1 = NotImplementedMethod;
    
      
ServiceB.prototype.MethodA1 = NotImplementedMethod;
    
      
ServiceB.prototype.MethodA2 = NotImplementedMethod;
    
      
ServiceB.prototype.MethodA3 = NotImplementedMethod;
    
      
ServiceB.prototype.MethodA4 = NotImplementedMethod;
     

    
ServiceB.prototype._serviceDescription = {
  name: 'ServiceB',
  pkgPath: 'v.io/core/veyron2/vdl/testdata/base',
  doc: "",
  embeds: [{
      name: 'ServiceA',
      pkgPath: 'v.io/core/veyron2/vdl/testdata/base',
      doc: ""
    },
    ],
  methods: [
    
      
    {
    name: 'MethodB1',
    doc: "",
    inArgs: [{
      name: 'a',
      doc: "",
      type: _typeScalars
    },
    {
      name: 'b',
      doc: "",
      type: _typeComposites
    },
    ],
    outArgs: [{
      name: 'c',
      doc: "",
      type: _typeCompComp
    },
    ],
    inStream: null,
    outStream: null,
    tags: []
  },
    
      
    {
    name: 'MethodA1',
    doc: "",
    inArgs: [],
    outArgs: [],
    inStream: null,
    outStream: null,
    tags: []
  },
    
      
    {
    name: 'MethodA2',
    doc: "",
    inArgs: [{
      name: 'a',
      doc: "",
      type: Types.INT32
    },
    {
      name: 'b',
      doc: "",
      type: Types.STRING
    },
    ],
    outArgs: [{
      name: 's',
      doc: "",
      type: Types.STRING
    },
    ],
    inStream: null,
    outStream: null,
    tags: []
  },
    
      
    {
    name: 'MethodA3',
    doc: "",
    inArgs: [{
      name: 'a',
      doc: "",
      type: Types.INT32
    },
    ],
    outArgs: [{
      name: 's',
      doc: "",
      type: Types.STRING
    },
    ],
    inStream: null,
    outStream: {
      name: '',
      doc: '',
      type: _typeScalars
    },
    tags: [new (Registry.lookupOrCreateConstructor(Types.STRING))("tag"), new (Registry.lookupOrCreateConstructor(Types.UINT64))(new BigInt(1, new Uint8Array([0x6]))), ]
  },
    
      
    {
    name: 'MethodA4',
    doc: "",
    inArgs: [{
      name: 'a',
      doc: "",
      type: Types.INT32
    },
    ],
    outArgs: [],
    inStream: {
      name: '',
      doc: '',
      type: Types.INT32
    },
    outStream: {
      name: '',
      doc: '',
      type: Types.STRING
    },
    tags: []
  },
     
  ]
};

   
 


