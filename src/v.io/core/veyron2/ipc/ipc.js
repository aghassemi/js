// This file was auto-generated by the veyron vdl tool.
var vom = require('vom');
// TODO(bjornick): Remove unused imports.
var Types = vom.Types;
var Type = vom.Type;
var Kind = vom.Kind;
var BigInt = vom.BigInt;
var Complex = vom.Complex;
var Builtins = vom.Builtins;
var Registry = vom.Registry;




var security = require('./../security/security');
var vtrace = require('./../vtrace/vtrace');
var wiretype = require('./../wiretype/wiretype');

module.exports = {};



// Types:
var _type1 = new Type();
var _type10 = new Type();
var _type11 = new Type();
var _type12 = new Type();
var _type2 = new Type();
var _type3 = new Type();
var _type4 = new Type();
var _type5 = new Type();
var _type6 = new Type();
var _type7 = new Type();
var _type8 = new Type();
var _type9 = new Type();
var _typeBlessingsRequest = new Type();
var _typeMethodArgument = new Type();
var _typeMethodSignature = new Type();
var _typeRequest = new Type();
var _typeResponse = new Type();
var _typeServiceSignature = new Type();
var _typeerror = new Type();
_type1.kind = Kind.LIST;
_type1.name = "";
_type1.elem = _type2;
_type10.kind = Kind.LIST;
_type10.name = "";
_type10.elem = vtrace.Annotation;
_type11.kind = Kind.MAP;
_type11.name = "";
_type11.elem = _typeMethodSignature;
_type11.key = Types.STRING;
_type12.kind = Kind.LIST;
_type12.name = "";
_type12.elem = _typeMethodArgument;
_type2.kind = Kind.LIST;
_type2.name = "";
_type2.elem = security.Certificate;
_type3.kind = Kind.LIST;
_type3.name = "";
_type3.elem = Types.BYTE;
_type4.kind = Kind.LIST;
_type4.name = "";
_type4.elem = security.Caveat;
_type5.kind = Kind.NILABLE;
_type5.name = "";
_type5.elem = security.WireBlessings;
_type6.kind = Kind.LIST;
_type6.name = "";
_type6.elem = Types.ANY;
_type7.kind = Kind.NILABLE;
_type7.name = "";
_type7.elem = _typeerror;
_type8.kind = Kind.STRUCT;
_type8.name = "";
_type8.fields = [{name: "ID", type: Types.STRING}, {name: "Action", type: Types.UINT32}];
_type9.kind = Kind.LIST;
_type9.name = "";
_type9.elem = vtrace.SpanRecord;
_typeBlessingsRequest.kind = Kind.STRUCT;
_typeBlessingsRequest.name = "v.io/core/veyron2/ipc.BlessingsRequest";
_typeBlessingsRequest.fields = [{name: "Key", type: Types.UINT64}, {name: "Blessings", type: _type5}];
_typeMethodArgument.kind = Kind.STRUCT;
_typeMethodArgument.name = "v.io/core/veyron2/ipc.MethodArgument";
_typeMethodArgument.fields = [{name: "Name", type: Types.STRING}, {name: "Type", type: wiretype.TypeID}];
_typeMethodSignature.kind = Kind.STRUCT;
_typeMethodSignature.name = "v.io/core/veyron2/ipc.MethodSignature";
_typeMethodSignature.fields = [{name: "InArgs", type: _type12}, {name: "OutArgs", type: _type12}, {name: "InStream", type: wiretype.TypeID}, {name: "OutStream", type: wiretype.TypeID}];
_typeRequest.kind = Kind.STRUCT;
_typeRequest.name = "v.io/core/veyron2/ipc.Request";
_typeRequest.fields = [{name: "Suffix", type: Types.STRING}, {name: "Method", type: Types.STRING}, {name: "NumPosArgs", type: Types.UINT64}, {name: "EndStreamArgs", type: Types.BOOL}, {name: "Timeout", type: Types.INT64}, {name: "GrantedBlessings", type: security.WireBlessings}, {name: "Blessings", type: _typeBlessingsRequest}, {name: "Discharges", type: _type6}, {name: "TraceRequest", type: vtrace.Request}];
_typeResponse.kind = Kind.STRUCT;
_typeResponse.name = "v.io/core/veyron2/ipc.Response";
_typeResponse.fields = [{name: "Error", type: _type7}, {name: "EndStreamResults", type: Types.BOOL}, {name: "NumPosResults", type: Types.UINT64}, {name: "TraceResponse", type: vtrace.Response}, {name: "AckBlessings", type: Types.BOOL}];
_typeServiceSignature.kind = Kind.STRUCT;
_typeServiceSignature.name = "v.io/core/veyron2/ipc.ServiceSignature";
_typeServiceSignature.fields = [{name: "TypeDefs", type: _type6}, {name: "Methods", type: _type11}];
_typeerror.kind = Kind.STRUCT;
_typeerror.name = "error";
_typeerror.fields = [{name: "IDAction", type: _type8}, {name: "Msg", type: Types.STRING}, {name: "ParamList", type: _type6}];
module.exports.BlessingsRequest = Registry.lookupOrCreateConstructor(_typeBlessingsRequest, "BlessingsRequest");
module.exports.MethodArgument = Registry.lookupOrCreateConstructor(_typeMethodArgument, "MethodArgument");
module.exports.MethodSignature = Registry.lookupOrCreateConstructor(_typeMethodSignature, "MethodSignature");
module.exports.Request = Registry.lookupOrCreateConstructor(_typeRequest, "Request");
module.exports.Response = Registry.lookupOrCreateConstructor(_typeResponse, "Response");
module.exports.ServiceSignature = Registry.lookupOrCreateConstructor(_typeServiceSignature, "ServiceSignature");
module.exports.error = Registry.lookupOrCreateConstructor(_typeerror, "error");




// Consts:

  module.exports.NoTimeout = new (Registry.lookupOrCreateConstructor(Types.INT64))(new BigInt(1, new Uint8Array([0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])));

  module.exports.GlobMethod = new (Registry.lookupOrCreateConstructor(Types.STRING))("__Glob");

  module.exports.ReservedSignature = new (Registry.lookupOrCreateConstructor(Types.STRING))("__Signature");

  module.exports.ReservedMethodSignature = new (Registry.lookupOrCreateConstructor(Types.STRING))("__MethodSignature");




function NotImplementedMethod(name) {
  throw new Error('Method ' + name + ' not implemented');
}


// Services:

   

   
 


