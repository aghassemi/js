// This file was auto-generated by the vanadium vdl tool.
var vdl = require('../../../../../../vdl');
var makeError = require('../../../../../../errors/make-errors');
var actions = require('../../../../../../errors/actions');
var canonicalize = require('../../../../../../vdl/canonicalize');





var security = require('./../../../security');

module.exports = {};



// Types:
var _type1 = new vdl.Type();
var _type2 = new vdl.Type();
var _type3 = new vdl.Type();
var _type4 = new vdl.Type();
var _type5 = new vdl.Type();
var _typeAccessList = new vdl.Type();
var _typePermissions = new vdl.Type();
var _typeTag = new vdl.Type();
var _typeerror = new vdl.Type();
_type1.kind = vdl.Kind.LIST;
_type1.name = "";
_type1.elem = new security.BlessingPattern()._type;
_type2.kind = vdl.Kind.LIST;
_type2.name = "";
_type2.elem = vdl.Types.STRING;
_type3.kind = vdl.Kind.LIST;
_type3.name = "";
_type3.elem = new security.RejectedBlessing()._type;
_type4.kind = vdl.Kind.ENUM;
_type4.name = "";
_type4.labels = ["NoRetry", "RetryConnection", "RetryRefetch", "RetryBackoff"];
_type5.kind = vdl.Kind.LIST;
_type5.name = "";
_type5.elem = vdl.Types.ANY;
_typeAccessList.kind = vdl.Kind.STRUCT;
_typeAccessList.name = "v.io/v23/services/security/access.AccessList";
_typeAccessList.fields = [{name: "In", type: _type1}, {name: "NotIn", type: _type2}];
_typePermissions.kind = vdl.Kind.MAP;
_typePermissions.name = "v.io/v23/services/security/access.Permissions";
_typePermissions.elem = _typeAccessList;
_typePermissions.key = vdl.Types.STRING;
_typeTag.kind = vdl.Kind.STRING;
_typeTag.name = "v.io/v23/services/security/access.Tag";
_typeerror.kind = vdl.Kind.STRUCT;
_typeerror.name = "error";
_typeerror.fields = [{name: "Id", type: vdl.Types.STRING}, {name: "RetryCode", type: _type4}, {name: "Msg", type: vdl.Types.STRING}, {name: "ParamList", type: _type5}];
_type1.freeze();
_type2.freeze();
_type3.freeze();
_type4.freeze();
_type5.freeze();
_typeAccessList.freeze();
_typePermissions.freeze();
_typeTag.freeze();
_typeerror.freeze();
module.exports.AccessList = (vdl.Registry.lookupOrCreateConstructor(_typeAccessList));
module.exports.Permissions = (vdl.Registry.lookupOrCreateConstructor(_typePermissions));
module.exports.Tag = (vdl.Registry.lookupOrCreateConstructor(_typeTag));
module.exports.error = (vdl.Registry.lookupOrCreateConstructor(_typeerror));




// Consts:

  module.exports.Admin = canonicalize.reduce(new (vdl.Registry.lookupOrCreateConstructor(_typeTag))("Admin", true), _typeTag);

  module.exports.Debug = canonicalize.reduce(new (vdl.Registry.lookupOrCreateConstructor(_typeTag))("Debug", true), _typeTag);

  module.exports.Read = canonicalize.reduce(new (vdl.Registry.lookupOrCreateConstructor(_typeTag))("Read", true), _typeTag);

  module.exports.Write = canonicalize.reduce(new (vdl.Registry.lookupOrCreateConstructor(_typeTag))("Write", true), _typeTag);

  module.exports.Resolve = canonicalize.reduce(new (vdl.Registry.lookupOrCreateConstructor(_typeTag))("Resolve", true), _typeTag);



// Errors:

module.exports.TooBigError = makeError('v.io/v23/services/security/access.TooBig', actions.NO_RETRY, {
  'en': '{1:}{2:} AccessList is too big',
}, [
]);


module.exports.AccessListMatchError = makeError('v.io/v23/services/security/access.AccessListMatch', actions.NO_RETRY, {
  'en': '{1:}{2:} none of the valid blessings ({3}) are allowed by the AccessList (rejected blessings: {4})',
}, [
  _type2,
  _type3,
]);




// Services:

   
 


