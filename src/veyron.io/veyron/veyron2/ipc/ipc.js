// This file was auto-generated by the veyron vdl tool.
var vom = require('vom');
// TODO(bjornick): Remove unused imports.
var Types = vom.Types;
var Type = vom.Type;
var Kind = vom.Kind;
var Complex = vom.Complex;
var Builtins = vom.Builtins;
var Registry = vom.Registry;




var security = require('./../security/security');
var vtrace = require('./../vtrace/vtrace');
var wiretype = require('./../wiretype/wiretype');


var types = {};
var _type1 = new Type();
var _type10 = new Type();
var _type11 = new Type();
var _type12 = new Type();
var _type13 = new Type();
var _type14 = new Type();
var _type15 = new Type();
var _type16 = new Type();
var _type17 = new Type();
var _type18 = new Type();
var _type19 = new Type();
var _type2 = new Type();
var _type20 = new Type();
var _type21 = new Type();
var _type22 = new Type();
var _type3 = new Type();
var _type4 = new Type();
var _type5 = new Type();
var _type6 = new Type();
var _type7 = new Type();
var _type8 = new Type();
var _type9 = new Type();
var _typeAnnotation = new Type();
var _typeArgSig = new Type();
var _typeCaveat = new Type();
var _typeCertificate = new Type();
var _typeEmbedSig = new Type();
var _typeHash = new Type();
var _typeID = new Type();
var _typeInterfaceSig = new Type();
var _typeMethodArgument = new Type();
var _typeMethodSig = new Type();
var _typeMethodSignature = new Type();
var _typeRequest = new Type();
var _typeRequest = new Type();
var _typeResponse = new Type();
var _typeResponse = new Type();
var _typeServiceSignature = new Type();
var _typeSignature = new Type();
var _typeSpanRecord = new Type();
var _typeTraceMethod = new Type();
var _typeTraceRecord = new Type();
var _typeTypeID = new Type();
var _typeWireBlessings = new Type();
var _typeerror = new Type();
_type1.kind = Kind.STRING;
_type10.kind = Kind.NILABLE;
_type10.elem = _typeerror;
_type11.kind = Kind.STRUCT;
_type11.fields = [{name: "ID", type: _type1}, {name: "Action", type: _type12}];
_type12.kind = Kind.UINT32;
_type13.kind = Kind.LIST;
_type13.elem = _type14;
_type14.kind = Kind.ANY;
_type15.kind = Kind.LIST;
_type15.elem = _typeSpanRecord;
_type16.kind = Kind.LIST;
_type16.elem = _typeAnnotation;
_type17.kind = Kind.LIST;
_type17.elem = _typeEmbedSig;
_type18.kind = Kind.LIST;
_type18.elem = _typeMethodSig;
_type19.kind = Kind.LIST;
_type19.elem = _typeArgSig;
_type2.kind = Kind.UINT64;
_type20.kind = Kind.TYPEOBJECT;
_type21.kind = Kind.MAP;
_type21.elem = _typeMethodSignature;
_type21.key = _type1;
_type22.kind = Kind.LIST;
_type22.elem = _typeMethodArgument;
_type3.kind = Kind.BOOL;
_type4.kind = Kind.INT64;
_type5.kind = Kind.LIST;
_type5.elem = _type6;
_type6.kind = Kind.LIST;
_type6.elem = _typeCertificate;
_type7.kind = Kind.LIST;
_type7.elem = _type8;
_type8.kind = Kind.BYTE;
_type9.kind = Kind.LIST;
_type9.elem = _typeCaveat;
_typeAnnotation.kind = Kind.STRUCT;
_typeAnnotation.name = "veyron.io/veyron/veyron2/vtrace.Annotation";
_typeAnnotation.fields = [{name: "When", type: _type4}, {name: "Message", type: _type1}];
_typeArgSig.kind = Kind.STRUCT;
_typeArgSig.name = "veyron.io/veyron/veyron2/ipc.ArgSig";
_typeArgSig.fields = [{name: "Name", type: _type1}, {name: "Doc", type: _type1}, {name: "Type", type: _type20}];
_typeCaveat.kind = Kind.STRUCT;
_typeCaveat.name = "veyron.io/veyron/veyron2/security.Caveat";
_typeCaveat.fields = [{name: "ValidatorVOM", type: _type7}];
_typeCertificate.kind = Kind.STRUCT;
_typeCertificate.name = "veyron.io/veyron/veyron2/security.Certificate";
_typeCertificate.fields = [{name: "Extension", type: _type1}, {name: "PublicKey", type: _type7}, {name: "Caveats", type: _type9}, {name: "Signature", type: _typeSignature}];
_typeEmbedSig.kind = Kind.STRUCT;
_typeEmbedSig.name = "veyron.io/veyron/veyron2/ipc.EmbedSig";
_typeEmbedSig.fields = [{name: "Name", type: _type1}, {name: "PkgPath", type: _type1}, {name: "Doc", type: _type1}];
_typeHash.kind = Kind.STRING;
_typeHash.name = "veyron.io/veyron/veyron2/security.Hash";
_typeID.kind = Kind.ARRAY;
_typeID.name = "veyron.io/veyron/veyron2/uniqueid.ID";
_typeID.len = 16;
_typeID.elem = _type8;
_typeInterfaceSig.kind = Kind.STRUCT;
_typeInterfaceSig.name = "veyron.io/veyron/veyron2/ipc.InterfaceSig";
_typeInterfaceSig.fields = [{name: "Name", type: _type1}, {name: "PkgPath", type: _type1}, {name: "Doc", type: _type1}, {name: "Embeds", type: _type17}, {name: "Methods", type: _type18}];
_typeMethodArgument.kind = Kind.STRUCT;
_typeMethodArgument.name = "veyron.io/veyron/veyron2/ipc.MethodArgument";
_typeMethodArgument.fields = [{name: "Name", type: _type1}, {name: "Type", type: _typeTypeID}];
_typeMethodSig.kind = Kind.STRUCT;
_typeMethodSig.name = "veyron.io/veyron/veyron2/ipc.MethodSig";
_typeMethodSig.fields = [{name: "Name", type: _type1}, {name: "Doc", type: _type1}, {name: "InArgs", type: _type19}, {name: "OutArgs", type: _type19}, {name: "InStreamHACK", type: _typeArgSig}, {name: "OutStreamHACK", type: _typeArgSig}, {name: "HasInStreamHACK", type: _type3}, {name: "HasOutStreamHACK", type: _type3}, {name: "Tags", type: _type13}];
_typeMethodSignature.kind = Kind.STRUCT;
_typeMethodSignature.name = "veyron.io/veyron/veyron2/ipc.MethodSignature";
_typeMethodSignature.fields = [{name: "InArgs", type: _type22}, {name: "OutArgs", type: _type22}, {name: "InStream", type: _typeTypeID}, {name: "OutStream", type: _typeTypeID}];
_typeRequest.kind = Kind.STRUCT;
_typeRequest.name = "veyron.io/veyron/veyron2/ipc.Request";
_typeRequest.fields = [{name: "Suffix", type: _type1}, {name: "Method", type: _type1}, {name: "NumPosArgs", type: _type2}, {name: "EndStreamArgs", type: _type3}, {name: "Timeout", type: _type4}, {name: "GrantedBlessings", type: _typeWireBlessings}, {name: "NumDischarges", type: _type2}, {name: "TraceRequest", type: _typeRequest}];
_typeRequest.kind = Kind.STRUCT;
_typeRequest.name = "veyron.io/veyron/veyron2/vtrace.Request";
_typeRequest.fields = [{name: "SpanID", type: _typeID}, {name: "TraceID", type: _typeID}, {name: "Method", type: _typeTraceMethod}];
_typeResponse.kind = Kind.STRUCT;
_typeResponse.name = "veyron.io/veyron/veyron2/vtrace.Response";
_typeResponse.fields = [{name: "Method", type: _typeTraceMethod}, {name: "Trace", type: _typeTraceRecord}];
_typeResponse.kind = Kind.STRUCT;
_typeResponse.name = "veyron.io/veyron/veyron2/ipc.Response";
_typeResponse.fields = [{name: "Error", type: _type10}, {name: "EndStreamResults", type: _type3}, {name: "NumPosResults", type: _type2}, {name: "TraceResponse", type: _typeResponse}];
_typeServiceSignature.kind = Kind.STRUCT;
_typeServiceSignature.name = "veyron.io/veyron/veyron2/ipc.ServiceSignature";
_typeServiceSignature.fields = [{name: "TypeDefs", type: _type13}, {name: "Methods", type: _type21}];
_typeSignature.kind = Kind.STRUCT;
_typeSignature.name = "veyron.io/veyron/veyron2/security.Signature";
_typeSignature.fields = [{name: "Purpose", type: _type7}, {name: "Hash", type: _typeHash}, {name: "R", type: _type7}, {name: "S", type: _type7}];
_typeSpanRecord.kind = Kind.STRUCT;
_typeSpanRecord.name = "veyron.io/veyron/veyron2/vtrace.SpanRecord";
_typeSpanRecord.fields = [{name: "ID", type: _typeID}, {name: "Parent", type: _typeID}, {name: "Name", type: _type1}, {name: "Start", type: _type4}, {name: "End", type: _type4}, {name: "Annotations", type: _type16}];
_typeTraceMethod.kind = Kind.INT32;
_typeTraceMethod.name = "veyron.io/veyron/veyron2/vtrace.TraceMethod";
_typeTraceRecord.kind = Kind.STRUCT;
_typeTraceRecord.name = "veyron.io/veyron/veyron2/vtrace.TraceRecord";
_typeTraceRecord.fields = [{name: "ID", type: _typeID}, {name: "Spans", type: _type15}];
_typeTypeID.kind = Kind.UINT64;
_typeTypeID.name = "veyron.io/veyron/veyron2/wiretype.TypeID";
_typeWireBlessings.kind = Kind.STRUCT;
_typeWireBlessings.name = "veyron.io/veyron/veyron2/security.WireBlessings";
_typeWireBlessings.fields = [{name: "CertificateChains", type: _type5}];
_typeerror.kind = Kind.STRUCT;
_typeerror.name = "error";
_typeerror.fields = [{name: "IDAction", type: _type11}, {name: "Msg", type: _type1}, {name: "ParamList", type: _type13}];
types.Annotation = Registry.lookupOrCreateConstructor(_typeAnnotation, "Annotation");
types.ArgSig = Registry.lookupOrCreateConstructor(_typeArgSig, "ArgSig");
types.Caveat = Registry.lookupOrCreateConstructor(_typeCaveat, "Caveat");
types.Certificate = Registry.lookupOrCreateConstructor(_typeCertificate, "Certificate");
types.EmbedSig = Registry.lookupOrCreateConstructor(_typeEmbedSig, "EmbedSig");
types.Hash = Registry.lookupOrCreateConstructor(_typeHash, "Hash");
types.ID = Registry.lookupOrCreateConstructor(_typeID, "ID");
types.InterfaceSig = Registry.lookupOrCreateConstructor(_typeInterfaceSig, "InterfaceSig");
types.MethodArgument = Registry.lookupOrCreateConstructor(_typeMethodArgument, "MethodArgument");
types.MethodSig = Registry.lookupOrCreateConstructor(_typeMethodSig, "MethodSig");
types.MethodSignature = Registry.lookupOrCreateConstructor(_typeMethodSignature, "MethodSignature");
types.Request = Registry.lookupOrCreateConstructor(_typeRequest, "Request");
types.Request = Registry.lookupOrCreateConstructor(_typeRequest, "Request");
types.Response = Registry.lookupOrCreateConstructor(_typeResponse, "Response");
types.Response = Registry.lookupOrCreateConstructor(_typeResponse, "Response");
types.ServiceSignature = Registry.lookupOrCreateConstructor(_typeServiceSignature, "ServiceSignature");
types.Signature = Registry.lookupOrCreateConstructor(_typeSignature, "Signature");
types.SpanRecord = Registry.lookupOrCreateConstructor(_typeSpanRecord, "SpanRecord");
types.TraceMethod = Registry.lookupOrCreateConstructor(_typeTraceMethod, "TraceMethod");
types.TraceRecord = Registry.lookupOrCreateConstructor(_typeTraceRecord, "TraceRecord");
types.TypeID = Registry.lookupOrCreateConstructor(_typeTypeID, "TypeID");
types.WireBlessings = Registry.lookupOrCreateConstructor(_typeWireBlessings, "WireBlessings");
types.error = Registry.lookupOrCreateConstructor(_typeerror, "error");



var consts = { 
  NoTimeout: new (Registry.lookupOrCreateConstructor(_type4))(9223372036854775807),
  GlobMethod: new (Registry.lookupOrCreateConstructor(_type1))("__Glob"),
  ReservedSignature: new (Registry.lookupOrCreateConstructor(_type1))("__Signature"),
  ReservedMethodSignature: new (Registry.lookupOrCreateConstructor(_type1))("__MethodSignature"),
};


function NotImplementedMethod(name) {
  throw new Error('Method ' + name + ' not implemented');
}


var services = {
package: 'veyron.io/veyron/veyron2/ipc',

};


var serviceDefs = {
  package: 'veyron.io/veyron/veyron2/ipc',

  

  

};



  

  


module.exports = {
  types: types,
  serviceDefs: serviceDefs,
  services: services,
  consts: consts,
};
