// This file was auto-generated by the veyron vdl tool.
var vom = require('vom');
// TODO(bjornick): Remove unused imports.
var Types = vom.Types;
var Type = vom.Type;
var Kind = vom.Kind;
var Complex = vom.Complex;
var Builtins = vom.Builtins;
var Registry = vom.Registry;




var uniqueid = require('./../uniqueid/uniqueid');


var types = {};
var _type1 = new Type();
var _type2 = new Type();
var _type3 = new Type();
var _type4 = new Type();
var _type5 = new Type();
var _typeAnnotation = new Type();
var _typeID = new Type();
var _typeRequest = new Type();
var _typeResponse = new Type();
var _typeSpanRecord = new Type();
var _typeTraceMethod = new Type();
var _typeTraceRecord = new Type();
_type1.kind = Kind.BYTE;
_type2.kind = Kind.LIST;
_type2.elem = _typeSpanRecord;
_type3.kind = Kind.STRING;
_type4.kind = Kind.INT64;
_type5.kind = Kind.LIST;
_type5.elem = _typeAnnotation;
_typeAnnotation.kind = Kind.STRUCT;
_typeAnnotation.name = "veyron.io/veyron/veyron2/vtrace.Annotation";
_typeAnnotation.fields = [{name: "When", type: _type4}, {name: "Message", type: _type3}];
_typeID.kind = Kind.ARRAY;
_typeID.name = "veyron.io/veyron/veyron2/uniqueid.ID";
_typeID.len = 16;
_typeID.elem = _type1;
_typeRequest.kind = Kind.STRUCT;
_typeRequest.name = "veyron.io/veyron/veyron2/vtrace.Request";
_typeRequest.fields = [{name: "SpanID", type: _typeID}, {name: "TraceID", type: _typeID}, {name: "Method", type: _typeTraceMethod}];
_typeResponse.kind = Kind.STRUCT;
_typeResponse.name = "veyron.io/veyron/veyron2/vtrace.Response";
_typeResponse.fields = [{name: "Method", type: _typeTraceMethod}, {name: "Trace", type: _typeTraceRecord}];
_typeSpanRecord.kind = Kind.STRUCT;
_typeSpanRecord.name = "veyron.io/veyron/veyron2/vtrace.SpanRecord";
_typeSpanRecord.fields = [{name: "ID", type: _typeID}, {name: "Parent", type: _typeID}, {name: "Name", type: _type3}, {name: "Start", type: _type4}, {name: "End", type: _type4}, {name: "Annotations", type: _type5}];
_typeTraceMethod.kind = Kind.INT32;
_typeTraceMethod.name = "veyron.io/veyron/veyron2/vtrace.TraceMethod";
_typeTraceRecord.kind = Kind.STRUCT;
_typeTraceRecord.name = "veyron.io/veyron/veyron2/vtrace.TraceRecord";
_typeTraceRecord.fields = [{name: "ID", type: _typeID}, {name: "Spans", type: _type2}];
types.Annotation = Registry.lookupOrCreateConstructor(_typeAnnotation, "Annotation");
types.ID = Registry.lookupOrCreateConstructor(_typeID, "ID");
types.Request = Registry.lookupOrCreateConstructor(_typeRequest, "Request");
types.Response = Registry.lookupOrCreateConstructor(_typeResponse, "Response");
types.SpanRecord = Registry.lookupOrCreateConstructor(_typeSpanRecord, "SpanRecord");
types.TraceMethod = Registry.lookupOrCreateConstructor(_typeTraceMethod, "TraceMethod");
types.TraceRecord = Registry.lookupOrCreateConstructor(_typeTraceRecord, "TraceRecord");



var consts = { 
  None: new (Registry.lookupOrCreateConstructor(_typeTraceMethod))(0),
  InMemory: new (Registry.lookupOrCreateConstructor(_typeTraceMethod))(1),
};


function NotImplementedMethod(name) {
  throw new Error('Method ' + name + ' not implemented');
}


var services = {
package: 'veyron.io/veyron/veyron2/vtrace',

};


var serviceDefs = {
  package: 'veyron.io/veyron/veyron2/vtrace',

  

};



  


module.exports = {
  types: types,
  serviceDefs: serviceDefs,
  services: services,
  consts: consts,
};
