// This file was auto-generated by the veyron vdl tool.
// Source: error_thrower.vdl

package test_service

import (
	// VDL system imports
	"v.io/v23"
	"v.io/v23/context"
	"v.io/v23/ipc"
)

// ErrorThrowerClientMethods is the client interface
// containing ErrorThrower methods.
//
// A testing interface with methods that throw various types of errors
type ErrorThrowerClientMethods interface {
	// Throws v23/vError.Aborted error
	ThrowAborted(*context.T, ...ipc.CallOpt) error
	// Throws v23/vError.BadArg error
	ThrowBadArg(*context.T, ...ipc.CallOpt) error
	// Throws v23/vError.BadProtocol error
	ThrowBadProtocol(*context.T, ...ipc.CallOpt) error
	// Throws v23/vError.Internal error
	ThrowInternal(*context.T, ...ipc.CallOpt) error
	// Throws v23/vError.NoAccess error
	ThrowNoAccess(*context.T, ...ipc.CallOpt) error
	// Throws v23/vError.NoExist error
	ThrowNoExist(*context.T, ...ipc.CallOpt) error
	// Throws v23/vError.NoExistOrNoAccess error
	ThrowNoExistOrNoAccess(*context.T, ...ipc.CallOpt) error
	// Throws v23/vError.Unknown error
	ThrowUnknown(*context.T, ...ipc.CallOpt) error
	// Throws normal Go error
	ThrowGoError(*context.T, ...ipc.CallOpt) error
	// Throws custom error created by using Standard
	ThrowCustomStandardError(*context.T, ...ipc.CallOpt) error
	// Lists all errors Ids available in v23/verror
	ListAllBuiltInErrorIDs(*context.T, ...ipc.CallOpt) ([]string, error)
}

// ErrorThrowerClientStub adds universal methods to ErrorThrowerClientMethods.
type ErrorThrowerClientStub interface {
	ErrorThrowerClientMethods
	ipc.UniversalServiceMethods
}

// ErrorThrowerClient returns a client stub for ErrorThrower.
func ErrorThrowerClient(name string, opts ...ipc.BindOpt) ErrorThrowerClientStub {
	var client ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(ipc.Client); ok {
			client = clientOpt
		}
	}
	return implErrorThrowerClientStub{name, client}
}

type implErrorThrowerClientStub struct {
	name   string
	client ipc.Client
}

func (c implErrorThrowerClientStub) c(ctx *context.T) ipc.Client {
	if c.client != nil {
		return c.client
	}
	return v23.GetClient(ctx)
}

func (c implErrorThrowerClientStub) ThrowAborted(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowAborted", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowBadArg(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowBadArg", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowBadProtocol(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowBadProtocol", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowInternal(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowInternal", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowNoAccess(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowNoAccess", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowNoExist(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowNoExist", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowNoExistOrNoAccess(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowNoExistOrNoAccess", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowUnknown(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowUnknown", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowGoError(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowGoError", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ThrowCustomStandardError(ctx *context.T, opts ...ipc.CallOpt) (err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowCustomStandardError", nil, opts...); err != nil {
		return
	}
	err = call.Finish()
	return
}

func (c implErrorThrowerClientStub) ListAllBuiltInErrorIDs(ctx *context.T, opts ...ipc.CallOpt) (o0 []string, err error) {
	var call ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ListAllBuiltInErrorIDs", nil, opts...); err != nil {
		return
	}
	err = call.Finish(&o0)
	return
}

// ErrorThrowerServerMethods is the interface a server writer
// implements for ErrorThrower.
//
// A testing interface with methods that throw various types of errors
type ErrorThrowerServerMethods interface {
	// Throws v23/vError.Aborted error
	ThrowAborted(ipc.ServerContext) error
	// Throws v23/vError.BadArg error
	ThrowBadArg(ipc.ServerContext) error
	// Throws v23/vError.BadProtocol error
	ThrowBadProtocol(ipc.ServerContext) error
	// Throws v23/vError.Internal error
	ThrowInternal(ipc.ServerContext) error
	// Throws v23/vError.NoAccess error
	ThrowNoAccess(ipc.ServerContext) error
	// Throws v23/vError.NoExist error
	ThrowNoExist(ipc.ServerContext) error
	// Throws v23/vError.NoExistOrNoAccess error
	ThrowNoExistOrNoAccess(ipc.ServerContext) error
	// Throws v23/vError.Unknown error
	ThrowUnknown(ipc.ServerContext) error
	// Throws normal Go error
	ThrowGoError(ipc.ServerContext) error
	// Throws custom error created by using Standard
	ThrowCustomStandardError(ipc.ServerContext) error
	// Lists all errors Ids available in v23/verror
	ListAllBuiltInErrorIDs(ipc.ServerContext) ([]string, error)
}

// ErrorThrowerServerStubMethods is the server interface containing
// ErrorThrower methods, as expected by ipc.Server.
// There is no difference between this interface and ErrorThrowerServerMethods
// since there are no streaming methods.
type ErrorThrowerServerStubMethods ErrorThrowerServerMethods

// ErrorThrowerServerStub adds universal methods to ErrorThrowerServerStubMethods.
type ErrorThrowerServerStub interface {
	ErrorThrowerServerStubMethods
	// Describe the ErrorThrower interfaces.
	Describe__() []ipc.InterfaceDesc
}

// ErrorThrowerServer returns a server stub for ErrorThrower.
// It converts an implementation of ErrorThrowerServerMethods into
// an object that may be used by ipc.Server.
func ErrorThrowerServer(impl ErrorThrowerServerMethods) ErrorThrowerServerStub {
	stub := implErrorThrowerServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implErrorThrowerServerStub struct {
	impl ErrorThrowerServerMethods
	gs   *ipc.GlobState
}

func (s implErrorThrowerServerStub) ThrowAborted(ctx ipc.ServerContext) error {
	return s.impl.ThrowAborted(ctx)
}

func (s implErrorThrowerServerStub) ThrowBadArg(ctx ipc.ServerContext) error {
	return s.impl.ThrowBadArg(ctx)
}

func (s implErrorThrowerServerStub) ThrowBadProtocol(ctx ipc.ServerContext) error {
	return s.impl.ThrowBadProtocol(ctx)
}

func (s implErrorThrowerServerStub) ThrowInternal(ctx ipc.ServerContext) error {
	return s.impl.ThrowInternal(ctx)
}

func (s implErrorThrowerServerStub) ThrowNoAccess(ctx ipc.ServerContext) error {
	return s.impl.ThrowNoAccess(ctx)
}

func (s implErrorThrowerServerStub) ThrowNoExist(ctx ipc.ServerContext) error {
	return s.impl.ThrowNoExist(ctx)
}

func (s implErrorThrowerServerStub) ThrowNoExistOrNoAccess(ctx ipc.ServerContext) error {
	return s.impl.ThrowNoExistOrNoAccess(ctx)
}

func (s implErrorThrowerServerStub) ThrowUnknown(ctx ipc.ServerContext) error {
	return s.impl.ThrowUnknown(ctx)
}

func (s implErrorThrowerServerStub) ThrowGoError(ctx ipc.ServerContext) error {
	return s.impl.ThrowGoError(ctx)
}

func (s implErrorThrowerServerStub) ThrowCustomStandardError(ctx ipc.ServerContext) error {
	return s.impl.ThrowCustomStandardError(ctx)
}

func (s implErrorThrowerServerStub) ListAllBuiltInErrorIDs(ctx ipc.ServerContext) ([]string, error) {
	return s.impl.ListAllBuiltInErrorIDs(ctx)
}

func (s implErrorThrowerServerStub) Globber() *ipc.GlobState {
	return s.gs
}

func (s implErrorThrowerServerStub) Describe__() []ipc.InterfaceDesc {
	return []ipc.InterfaceDesc{ErrorThrowerDesc}
}

// ErrorThrowerDesc describes the ErrorThrower interface.
var ErrorThrowerDesc ipc.InterfaceDesc = descErrorThrower

// descErrorThrower hides the desc to keep godoc clean.
var descErrorThrower = ipc.InterfaceDesc{
	Name:    "ErrorThrower",
	PkgPath: "test_service",
	Doc:     "// A testing interface with methods that throw various types of errors",
	Methods: []ipc.MethodDesc{
		{
			Name: "ThrowAborted",
			Doc:  "// Throws v23/vError.Aborted error",
		},
		{
			Name: "ThrowBadArg",
			Doc:  "// Throws v23/vError.BadArg error",
		},
		{
			Name: "ThrowBadProtocol",
			Doc:  "// Throws v23/vError.BadProtocol error",
		},
		{
			Name: "ThrowInternal",
			Doc:  "// Throws v23/vError.Internal error",
		},
		{
			Name: "ThrowNoAccess",
			Doc:  "// Throws v23/vError.NoAccess error",
		},
		{
			Name: "ThrowNoExist",
			Doc:  "// Throws v23/vError.NoExist error",
		},
		{
			Name: "ThrowNoExistOrNoAccess",
			Doc:  "// Throws v23/vError.NoExistOrNoAccess error",
		},
		{
			Name: "ThrowUnknown",
			Doc:  "// Throws v23/vError.Unknown error",
		},
		{
			Name: "ThrowGoError",
			Doc:  "// Throws normal Go error",
		},
		{
			Name: "ThrowCustomStandardError",
			Doc:  "// Throws custom error created by using Standard",
		},
		{
			Name: "ListAllBuiltInErrorIDs",
			Doc:  "// Lists all errors Ids available in v23/verror",
			OutArgs: []ipc.ArgDesc{
				{"", ``}, // []string
			},
		},
	},
}
