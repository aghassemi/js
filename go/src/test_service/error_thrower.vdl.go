// This file was auto-generated by the veyron vdl tool.
// Source: error_thrower.vdl

package test_service

import (
	// The non-user imports are prefixed with "__" to prevent collisions.
	__veyron2 "veyron.io/veyron/veyron2"
	__context "veyron.io/veyron/veyron2/context"
	__ipc "veyron.io/veyron/veyron2/ipc"
	__vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
	__wiretype "veyron.io/veyron/veyron2/wiretype"
)

// TODO(toddw): Remove this line once the new signature support is done.
// It corrects a bug where __wiretype is unused in VDL pacakges where only
// bootstrap types are used on interfaces.
const _ = __wiretype.TypeIDInvalid

// ErrorThrowerClientMethods is the client interface
// containing ErrorThrower methods.
//
// A testing interface with methods that throw various types of errors
type ErrorThrowerClientMethods interface {
	// Throws veyron2/vError.Aborted error
	ThrowAborted(__context.T, ...__ipc.CallOpt) error
	// Throws veyron2/vError.BadArg error
	ThrowBadArg(__context.T, ...__ipc.CallOpt) error
	// Throws veyron2/vError.BadProtocol error
	ThrowBadProtocol(__context.T, ...__ipc.CallOpt) error
	// Throws veyron2/vError.Internal error
	ThrowInternal(__context.T, ...__ipc.CallOpt) error
	// Throws veyron2/vError.NoAccess error
	ThrowNoAccess(__context.T, ...__ipc.CallOpt) error
	// Throws veyron2/vError.NoExist error
	ThrowNoExist(__context.T, ...__ipc.CallOpt) error
	// Throws veyron2/vError.NoExistOrNoAccess error
	ThrowNoExistOrNoAccess(__context.T, ...__ipc.CallOpt) error
	// Throws veyron2/vError.Unknown error
	ThrowUnknown(__context.T, ...__ipc.CallOpt) error
	// Throws normal Go error
	ThrowGoError(__context.T, ...__ipc.CallOpt) error
	// Throws custom error created by using Standard
	ThrowCustomStandardError(__context.T, ...__ipc.CallOpt) error
	// Lists all errors Ids available in veyron2/verror
	ListAllBuiltInErrorIDs(__context.T, ...__ipc.CallOpt) ([]string, error)
}

// ErrorThrowerClientStub adds universal methods to ErrorThrowerClientMethods.
type ErrorThrowerClientStub interface {
	ErrorThrowerClientMethods
	__ipc.UniversalServiceMethods
}

// ErrorThrowerClient returns a client stub for ErrorThrower.
func ErrorThrowerClient(name string, opts ...__ipc.BindOpt) ErrorThrowerClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implErrorThrowerClientStub{name, client}
}

type implErrorThrowerClientStub struct {
	name   string
	client __ipc.Client
}

func (c implErrorThrowerClientStub) c(ctx __context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.RuntimeFromContext(ctx).Client()
}

func (c implErrorThrowerClientStub) ThrowAborted(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowAborted", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowBadArg(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowBadArg", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowBadProtocol(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowBadProtocol", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowInternal(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowInternal", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowNoAccess(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowNoAccess", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowNoExist(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowNoExist", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowNoExistOrNoAccess(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowNoExistOrNoAccess", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowUnknown(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowUnknown", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowGoError(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowGoError", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ThrowCustomStandardError(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ThrowCustomStandardError", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) ListAllBuiltInErrorIDs(ctx __context.T, opts ...__ipc.CallOpt) (o0 []string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ListAllBuiltInErrorIDs", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) Signature(ctx __context.T, opts ...__ipc.CallOpt) (o0 __ipc.ServiceSignature, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implErrorThrowerClientStub) GetMethodTags(ctx __context.T, method string, opts ...__ipc.CallOpt) (o0 []interface{}, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// ErrorThrowerServerMethods is the interface a server writer
// implements for ErrorThrower.
//
// A testing interface with methods that throw various types of errors
type ErrorThrowerServerMethods interface {
	// Throws veyron2/vError.Aborted error
	ThrowAborted(__ipc.ServerContext) error
	// Throws veyron2/vError.BadArg error
	ThrowBadArg(__ipc.ServerContext) error
	// Throws veyron2/vError.BadProtocol error
	ThrowBadProtocol(__ipc.ServerContext) error
	// Throws veyron2/vError.Internal error
	ThrowInternal(__ipc.ServerContext) error
	// Throws veyron2/vError.NoAccess error
	ThrowNoAccess(__ipc.ServerContext) error
	// Throws veyron2/vError.NoExist error
	ThrowNoExist(__ipc.ServerContext) error
	// Throws veyron2/vError.NoExistOrNoAccess error
	ThrowNoExistOrNoAccess(__ipc.ServerContext) error
	// Throws veyron2/vError.Unknown error
	ThrowUnknown(__ipc.ServerContext) error
	// Throws normal Go error
	ThrowGoError(__ipc.ServerContext) error
	// Throws custom error created by using Standard
	ThrowCustomStandardError(__ipc.ServerContext) error
	// Lists all errors Ids available in veyron2/verror
	ListAllBuiltInErrorIDs(__ipc.ServerContext) ([]string, error)
}

// ErrorThrowerServerStubMethods is the server interface containing
// ErrorThrower methods, as expected by ipc.Server.  The difference between
// this interface and ErrorThrowerServerMethods is that the first context
// argument for each method is always ipc.ServerCall here, while it is either
// ipc.ServerContext or a typed streaming context there.
type ErrorThrowerServerStubMethods interface {
	// Throws veyron2/vError.Aborted error
	ThrowAborted(__ipc.ServerCall) error
	// Throws veyron2/vError.BadArg error
	ThrowBadArg(__ipc.ServerCall) error
	// Throws veyron2/vError.BadProtocol error
	ThrowBadProtocol(__ipc.ServerCall) error
	// Throws veyron2/vError.Internal error
	ThrowInternal(__ipc.ServerCall) error
	// Throws veyron2/vError.NoAccess error
	ThrowNoAccess(__ipc.ServerCall) error
	// Throws veyron2/vError.NoExist error
	ThrowNoExist(__ipc.ServerCall) error
	// Throws veyron2/vError.NoExistOrNoAccess error
	ThrowNoExistOrNoAccess(__ipc.ServerCall) error
	// Throws veyron2/vError.Unknown error
	ThrowUnknown(__ipc.ServerCall) error
	// Throws normal Go error
	ThrowGoError(__ipc.ServerCall) error
	// Throws custom error created by using Standard
	ThrowCustomStandardError(__ipc.ServerCall) error
	// Lists all errors Ids available in veyron2/verror
	ListAllBuiltInErrorIDs(__ipc.ServerCall) ([]string, error)
}

// ErrorThrowerServerStub adds universal methods to ErrorThrowerServerStubMethods.
type ErrorThrowerServerStub interface {
	ErrorThrowerServerStubMethods
	// GetMethodTags will be replaced with DescribeInterfaces.
	GetMethodTags(call __ipc.ServerCall, method string) ([]interface{}, error)
	// Signature will be replaced with DescribeInterfaces.
	Signature(call __ipc.ServerCall) (__ipc.ServiceSignature, error)
}

// ErrorThrowerServer returns a server stub for ErrorThrower.
// It converts an implementation of ErrorThrowerServerMethods into
// an object that may be used by ipc.Server.
func ErrorThrowerServer(impl ErrorThrowerServerMethods) ErrorThrowerServerStub {
	stub := implErrorThrowerServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implErrorThrowerServerStub struct {
	impl ErrorThrowerServerMethods
	gs   *__ipc.GlobState
}

func (s implErrorThrowerServerStub) ThrowAborted(call __ipc.ServerCall) error {
	return s.impl.ThrowAborted(call)
}

func (s implErrorThrowerServerStub) ThrowBadArg(call __ipc.ServerCall) error {
	return s.impl.ThrowBadArg(call)
}

func (s implErrorThrowerServerStub) ThrowBadProtocol(call __ipc.ServerCall) error {
	return s.impl.ThrowBadProtocol(call)
}

func (s implErrorThrowerServerStub) ThrowInternal(call __ipc.ServerCall) error {
	return s.impl.ThrowInternal(call)
}

func (s implErrorThrowerServerStub) ThrowNoAccess(call __ipc.ServerCall) error {
	return s.impl.ThrowNoAccess(call)
}

func (s implErrorThrowerServerStub) ThrowNoExist(call __ipc.ServerCall) error {
	return s.impl.ThrowNoExist(call)
}

func (s implErrorThrowerServerStub) ThrowNoExistOrNoAccess(call __ipc.ServerCall) error {
	return s.impl.ThrowNoExistOrNoAccess(call)
}

func (s implErrorThrowerServerStub) ThrowUnknown(call __ipc.ServerCall) error {
	return s.impl.ThrowUnknown(call)
}

func (s implErrorThrowerServerStub) ThrowGoError(call __ipc.ServerCall) error {
	return s.impl.ThrowGoError(call)
}

func (s implErrorThrowerServerStub) ThrowCustomStandardError(call __ipc.ServerCall) error {
	return s.impl.ThrowCustomStandardError(call)
}

func (s implErrorThrowerServerStub) ListAllBuiltInErrorIDs(call __ipc.ServerCall) ([]string, error) {
	return s.impl.ListAllBuiltInErrorIDs(call)
}

func (s implErrorThrowerServerStub) VGlob() *__ipc.GlobState {
	return s.gs
}

func (s implErrorThrowerServerStub) GetMethodTags(call __ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(toddw): Replace with new DescribeInterfaces implementation.
	switch method {
	case "ThrowAborted":
		return []interface{}{}, nil
	case "ThrowBadArg":
		return []interface{}{}, nil
	case "ThrowBadProtocol":
		return []interface{}{}, nil
	case "ThrowInternal":
		return []interface{}{}, nil
	case "ThrowNoAccess":
		return []interface{}{}, nil
	case "ThrowNoExist":
		return []interface{}{}, nil
	case "ThrowNoExistOrNoAccess":
		return []interface{}{}, nil
	case "ThrowUnknown":
		return []interface{}{}, nil
	case "ThrowGoError":
		return []interface{}{}, nil
	case "ThrowCustomStandardError":
		return []interface{}{}, nil
	case "ListAllBuiltInErrorIDs":
		return []interface{}{}, nil
	default:
		return nil, nil
	}
}

func (s implErrorThrowerServerStub) Signature(call __ipc.ServerCall) (__ipc.ServiceSignature, error) {
	// TODO(toddw) Replace with new DescribeInterfaces implementation.
	result := __ipc.ServiceSignature{Methods: make(map[string]__ipc.MethodSignature)}
	result.Methods["ListAllBuiltInErrorIDs"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 61},
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowAborted"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowBadArg"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowBadProtocol"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowCustomStandardError"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowGoError"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowInternal"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowNoAccess"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowNoExist"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowNoExistOrNoAccess"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["ThrowUnknown"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []__vdlutil.Any{
		__wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}
